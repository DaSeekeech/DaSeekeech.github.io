// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ò–ù–¢–ï–†–§–ï–ô–°–û–ú - –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø ===

class UIManager {
    constructor() {
        this.isDarkTheme = true;
        this.isPreviewMode = false;
        this.tipsVisible = false;
        this.isMobile = window.innerWidth <= 768;
        
        this.initializeTheme();
        this.setupMobileDetection();
        this.setupGlobalEventListeners();
    }

    setupMobileDetection() {
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        const checkMobile = () => {
            this.isMobile = window.innerWidth <= 768;
            this.handleMobileLayout();
        };

        window.addEventListener('resize', checkMobile);
        checkMobile(); // Initial check
    }

    handleMobileLayout() {
        const appContainer = document.querySelector('.app-container');
        if (!appContainer) return;

        if (this.isMobile) {
            appContainer.classList.add('mobile-view');
            this.setupMobileMenu();
            this.adaptUIForMobile();
        } else {
            appContainer.classList.remove('mobile-view');
            this.removeMobileMenu();
            this.adaptUIForDesktop();
        }
    }

    setupMobileMenu() {
        // –ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (document.getElementById('mobileMenu')) return;

        const mobileMenu = document.createElement('div');
        mobileMenu.id = 'mobileMenu';
        mobileMenu.className = 'mobile-menu';
        mobileMenu.innerHTML = `
            <button class="mobile-btn" data-action="open" title="–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª">üìÅ</button>
            <button class="mobile-btn" data-action="save" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª">üíæ</button>
            <button class="mobile-btn" data-action="theme" title="–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É">üåô</button>
            <button class="mobile-btn" data-action="help" title="–ü–æ–º–æ—â—å">‚ÑπÔ∏è</button>
            <button class="mobile-btn" data-action="preview" title="–ü—Ä–µ–≤—å—é">üëÅÔ∏è</button>
        `;

        // –í—Å—Ç–∞–≤–ª—è–µ–º –º–µ–Ω—é –ø–µ—Ä–µ–¥ status-bar
        const statusBar = document.querySelector('.status-bar');
        if (statusBar) {
            statusBar.parentNode.insertBefore(mobileMenu, statusBar);
        } else {
            document.querySelector('.app-container').appendChild(mobileMenu);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
        mobileMenu.querySelectorAll('.mobile-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const action = e.currentTarget.dataset.action;
                this.handleMobileAction(action);
            });
        });
    }

    removeMobileMenu() {
        const mobileMenu = document.getElementById('mobileMenu');
        if (mobileMenu) {
            mobileMenu.remove();
        }
    }

    adaptUIForMobile() {
        // –°–∫—Ä—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        const toolbar = document.querySelector('.toolbar');
        if (toolbar) {
            toolbar.style.display = 'none';
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editor = document.getElementById('textEditor');
        if (editor) {
            editor.style.fontSize = '16px'; // –£–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
            editor.style.minHeight = '50vh';
        }
    }

    adaptUIForDesktop() {
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        const toolbar = document.querySelector('.toolbar');
        if (toolbar) {
            toolbar.style.display = 'flex';
        }

        const editor = document.getElementById('textEditor');
        if (editor) {
            editor.style.fontSize = '14px';
            editor.style.minHeight = 'auto';
        }
    }

    handleMobileAction(action) {
        switch(action) {
            case 'open':
                document.getElementById('fileInput').click();
                break;
            case 'save':
                if (window.textEditorInstance) {
                    window.textEditorInstance.saveCurrentFile();
                }
                break;
            case 'theme':
                this.toggleTheme();
                break;
            case 'help':
                const currentFormat = window.textEditorInstance?.currentFormat || 'plain';
                this.showTips(currentFormat);
                break;
            case 'preview':
                const previewToggle = document.getElementById('previewToggle');
                if (previewToggle) {
                    previewToggle.checked = !previewToggle.checked;
                    this.togglePreview();
                }
                break;
        }
    }

    setupGlobalEventListeners() {
        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏
        document.addEventListener('click', (e) => {
            const tipsPanel = document.getElementById('tipsPanel');
            const formatHelp = document.getElementById('formatHelp');
            
            if (this.tipsVisible && tipsPanel && 
                !tipsPanel.contains(e.target) && 
                e.target !== formatHelp &&
                !formatHelp?.contains(e.target)) {
                this.hideTips();
            }
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫ –ø–æ ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.tipsVisible) {
                this.hideTips();
            }
        });
    }

    initializeTheme() {
        this.loadPreferences();
        this.applyTheme();
    }

    applyTheme() {
        const themeLink = document.querySelector('link[href*="themes/"]');
        if (themeLink) {
            themeLink.href = this.isDarkTheme ? 
                'styles/themes/dark.css' : 
                'styles/themes/light.css';
        }
        
        this.updateThemeButton();
        this.updateSyntaxHighlighting();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫–æ –≤—Å–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç—É
        document.documentElement.setAttribute('data-theme', this.isDarkTheme ? 'dark' : 'light');
    }

    updateThemeButton() {
        const themeButton = document.getElementById('themeToggle');
        if (themeButton) {
            themeButton.textContent = this.isDarkTheme ? 'üåô –¢—ë–º–Ω–∞—è' : '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
            themeButton.title = this.isDarkTheme ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ —Ç–µ–º–Ω—É—é —Ç–µ–º—É';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É —Ç–µ–º—ã
            const mobileThemeBtn = document.querySelector('.mobile-btn[data-action="theme"]');
            if (mobileThemeBtn) {
                mobileThemeBtn.textContent = this.isDarkTheme ? 'üåô' : '‚òÄÔ∏è';
                mobileThemeBtn.title = this.isDarkTheme ? '–°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞' : '–¢—ë–º–Ω–∞—è —Ç–µ–º–∞';
            }
        }
    }

    toggleTheme() {
        this.isDarkTheme = !this.isDarkTheme;
        this.applyTheme();
        this.savePreferences();
    }

    updateSyntaxHighlighting() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É highlight.js –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–µ–º—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if (typeof hljs !== 'undefined') {
            const link = document.querySelector('link[href*="highlight.js"]');
            if (link) {
                const newTheme = this.isDarkTheme ? 
                    'github-dark.min.css' : 
                    'github.min.css';
                link.href = `https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/${newTheme}`;
            }
            
            // –ü–µ—Ä–µ–ø—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–æ –≤—Å–µ–º –±–ª–æ–∫–∞–º –∫–æ–¥–∞
            setTimeout(() => {
                document.querySelectorAll('pre code').forEach((block) => {
                    hljs.highlightElement(block);
                });
            }, 150);
        }
    }

    togglePreview() {
        this.isPreviewMode = !this.isPreviewMode;
        const editorPanel = document.getElementById('editorPanel');
        const previewPanel = document.getElementById('previewPanel');
        const previewToggle = document.getElementById('previewToggle');
        
        if (this.isPreviewMode) {
            editorPanel.classList.add('hidden');
            previewPanel.classList.remove('hidden');
            if (previewToggle) previewToggle.checked = true;
            this.updatePreview();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–µ–≤—å—é
            const mobilePreviewBtn = document.querySelector('.mobile-btn[data-action="preview"]');
            if (mobilePreviewBtn) {
                mobilePreviewBtn.textContent = '‚úèÔ∏è';
                mobilePreviewBtn.title = '–†–µ–¥–∞–∫—Ç–æ—Ä';
            }
        } else {
            editorPanel.classList.remove('hidden');
            previewPanel.classList.add('hidden');
            if (previewToggle) previewToggle.checked = false;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –ø—Ä–µ–≤—å—é
            const mobilePreviewBtn = document.querySelector('.mobile-btn[data-action="preview"]');
            if (mobilePreviewBtn) {
                mobilePreviewBtn.textContent = 'üëÅÔ∏è';
                mobilePreviewBtn.title = '–ü—Ä–µ–≤—å—é';
            }
        }
        
        this.savePreferences();
    }

    updatePreview() {
        if (window.textEditorInstance && typeof window.textEditorInstance.updatePreview === 'function') {
            window.textEditorInstance.updatePreview();
        }
    }

    showTips(format) {
        this.tipsVisible = true;
        const tipsPanel = document.getElementById('tipsPanel');
        const tipsContent = document.getElementById('tipsContent');
        
        if (!tipsPanel || !tipsContent) return;
        
        const formatTips = new FormatTips();
        tipsContent.innerHTML = formatTips.renderTips(format);
        tipsPanel.classList.remove('hidden');
        tipsPanel.classList.add('fade-in');
        
        // –î–æ–±–∞–≤–ª—è–µ–º overlay –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        if (this.isMobile) {
            this.createOverlay();
        }
    }

    hideTips() {
        this.tipsVisible = false;
        const tipsPanel = document.getElementById('tipsPanel');
        if (tipsPanel) {
            tipsPanel.classList.add('hidden');
            tipsPanel.classList.remove('fade-in');
        }
        
        // –£–¥–∞–ª—è–µ–º overlay
        this.removeOverlay();
    }

    createOverlay() {
        if (document.getElementById('tipsOverlay')) return;
        
        const overlay = document.createElement('div');
        overlay.id = 'tipsOverlay';
        overlay.style.cssText = `
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        `;
        overlay.addEventListener('click', () => this.hideTips());
        document.body.appendChild(overlay);
    }

    removeOverlay() {
        const overlay = document.getElementById('tipsOverlay');
        if (overlay) {
            overlay.remove();
        }
    }

    updateStatus(text, type = 'info') {
        const statusElement = document.getElementById('fileStatus');
        if (statusElement) {
            statusElement.textContent = text;
            statusElement.className = `file-status status-${type}`;
            
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            if (type === 'success') {
                setTimeout(() => {
                    if (statusElement.textContent === text) {
                        statusElement.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
                        statusElement.className = 'file-status status-info';
                    }
                }, 5000);
            }
            
            // –î–ª—è –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ª—å—à–µ
            if (type === 'error') {
                setTimeout(() => {
                    if (statusElement.textContent === text) {
                        statusElement.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
                        statusElement.className = 'file-status status-info';
                    }
                }, 10000);
            }
        }
    }

    updateCounters(text) {
        const charCount = document.getElementById('charCount');
        const lineCount = document.getElementById('lineCount');
        
        if (charCount && lineCount) {
            const lines = text.split('\n');
            const charCountValue = text.length;
            const lineCountValue = lines.length;
            
            charCount.textContent = `${charCountValue.toLocaleString()} —Å–∏–º–≤–æ–ª–æ–≤`;
            lineCount.textContent = `${lineCountValue} —Å—Ç—Ä–æ–∫`;
            
            // –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è)
            const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;
            charCount.title = `${wordCount.toLocaleString()} —Å–ª–æ–≤`;
            lineCount.title = `–ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞: ${lines[lines.length - 1]?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`;
            
            // –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
            if (charCountValue > 10000) {
                charCount.style.color = 'var(--warning-color)';
            } else {
                charCount.style.color = '';
            }
        }
    }

    savePreferences() {
        const preferences = {
            theme: this.isDarkTheme ? 'dark' : 'light',
            preview: this.isPreviewMode,
            lastFormat: document.getElementById('formatSelector')?.value || 'plain',
            timestamp: new Date().toISOString()
        };
        
        try {
            localStorage.setItem('seekeechEditorPreferences', JSON.stringify(preferences));
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error);
        }
    }

    loadPreferences() {
        try {
            const saved = localStorage.getItem('seekeechEditorPreferences');
            if (saved) {
                const preferences = JSON.parse(saved);
                this.isDarkTheme = preferences.theme === 'dark';
                this.isPreviewMode = preferences.preview || false;
                
                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
                const formatSelector = document.getElementById('formatSelector');
                if (formatSelector && preferences.lastFormat) {
                    formatSelector.value = preferences.lastFormat;
                }
                
                console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', preferences);
            }
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
            this.isDarkTheme = true;
            this.isPreviewMode = false;
        }
    }

    showError(message, details = '') {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', message, details);
        this.updateStatus(`–û—à–∏–±–∫–∞: ${message}`, 'error');
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
        if (details && console.error) {
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', details);
        }
        
        // –í–∏–∑—É–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.showNotification(message, 'error');
    }

    showNotification(message, type = 'info', duration = 3000) {
        // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        let notification = document.getElementById('globalNotification');
        if (!notification) {
            notification = document.createElement('div');
            notification.id = 'globalNotification';
            notification.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                padding: 1rem;
                border-radius: 4px;
                z-index: 10000;
                max-width: 300px;
                word-wrap: break-word;
                animation: slideInRight 0.3s ease;
            `;
            document.body.appendChild(notification);
        }
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        const typeStyles = {
            error: 'background: var(--error-color); color: white;',
            success: 'background: var(--success-color); color: white;',
            warning: 'background: var(--warning-color); color: black;',
            info: 'background: var(--accent-color); color: white;'
        };
        
        notification.style.cssText += typeStyles[type] || typeStyles.info;
        notification.textContent = message;
        notification.classList.add('fade-in');
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∫—Ä—ã—Ç–∏–µ
        setTimeout(() => {
            if (notification.parentNode) {
                notification.classList.remove('fade-in');
                notification.classList.add('fade-out');
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.remove();
                    }
                }, 300);
            }
        }, duration);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        this.updateStatus(message, 'info');
        
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏–Ω–Ω–µ—Ä –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        const statusElement = document.getElementById('fileStatus');
        if (statusElement) {
            statusElement.innerHTML = `‚è≥ ${message}`;
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
    hideLoading() {
        const statusElement = document.getElementById('fileStatus');
        if (statusElement && statusElement.innerHTML.includes('‚è≥')) {
            statusElement.textContent = '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ';
            statusElement.className = 'file-status status-info';
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º CSS –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –∞–Ω–∏–º–∞—Ü–∏–π
const style = document.createElement('style');
style.textContent = `
    .status-success { color: var(--success-color) !important; }
    .status-error { color: var(--error-color) !important; }
    .status-warning { color: var(--warning-color) !important; }
    .status-info { color: var(--text-secondary) !important; }
    
    .mobile-menu {
        display: flex;
        justify-content: space-around;
        padding: 0.5rem;
        background: var(--bg-tertiary);
        border-top: 1px solid var(--border-color);
        position: sticky;
        bottom: 0;
        z-index: 100;
    }
    
    .mobile-btn {
        padding: 0.8rem;
        font-size: 1.2rem;
        background: none;
        border: none;
        cursor: pointer;
        border-radius: 50%;
        width: 50px;
        height: 50px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }
    
    .mobile-btn:hover {
        background: var(--border-color);
    }
    
    .mobile-btn:active {
        transform: scale(0.95);
    }
    
    @keyframes slideInRight {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    @keyframes fadeOut {
        from { opacity: 1; }
        to { opacity: 0; }
    }
    
    .fade-out {
        animation: fadeOut 0.3s ease;
    }
    
    .mobile-view .toolbar {
        display: none !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–æ–ª–ª –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
    @media (max-width: 768px) {
        .editor-panel, .preview-panel {
            -webkit-overflow-scrolling: touch;
        }
    }
`;
document.head.appendChild(style);

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = UIManager;
          }
